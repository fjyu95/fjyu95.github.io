<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Gaussian Splatting - Tag - FangjieYu‘s site</title><link>https://fjyu95.github.io/tags/gaussian-splatting/</link><description>Gaussian Splatting - Tag - FangjieYu‘s site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>907040864@qq.com (fjyu95)</managingEditor><webMaster>907040864@qq.com (fjyu95)</webMaster><lastBuildDate>Fri, 08 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://fjyu95.github.io/tags/gaussian-splatting/" rel="self" type="application/rss+xml"/><item><title>3DGS</title><link>https://fjyu95.github.io/posts/3dgs-138e4020f06080e7b9ced1f2074982d5/</link><pubDate>Fri, 08 Nov 2024 00:00:00 +0000</pubDate><author>fjyu95</author><guid>https://fjyu95.github.io/posts/3dgs-138e4020f06080e7b9ced1f2074982d5/</guid><description><![CDATA[<p><a href="https://github.com/graphdeco-inria/gaussian-splatting?tab=readme-ov-file" target="_blank" rel="noopener noreffer ">GitHub - graphdeco-inria/gaussian-splatting: Original reference implementation of &ldquo;3D Gaussian Splatting for Real-Time Radiance Field Rendering&rdquo;</a></p>
<p><a href="http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/3DGaussianSplatting.html#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89gaussian%E7%82%B9" target="_blank" rel="noopener noreffer ">http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/3DGaussianSplatting.html#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89gaussian%E7%82%B9</a></p>
<p><a href="http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0.html#%E7%90%83%E9%9D%A2%E9%AB%98%E6%96%AF%EF%BC%88spherical-gaussian%EF%BC%89" target="_blank" rel="noopener noreffer ">http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0.html#%E7%90%83%E9%9D%A2%E9%AB%98%E6%96%AF%EF%BC%88spherical-gaussian%EF%BC%89</a></p>
<p><a href="http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/3D%E9%AB%98%E6%96%AF%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC.html#derivation-of-sampling" target="_blank" rel="noopener noreffer ">http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/3D%E9%AB%98%E6%96%AF%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC.html#derivation-of-sampling</a></p>
<p><a href="https://www.find.org.tw/index/tech_obser/browse/7eaa3e8ffc7876e74509befd5ed50b8a/" target="_blank" rel="noopener noreffer ">https://www.find.org.tw/index/tech_obser/browse/7eaa3e8ffc7876e74509befd5ed50b8a/</a></p>
<p></p>
<p>3DGS使用隨機梯度下降法進行訓練。步驟如下：</p>
<ol>
<li>SfM Points：首先利用運動恢復結構技術（Structure from Motion，SfM），從一組2D相片中找到不同照片中疊合的特徵點，來估計出初步的3D點雲及相機位置，程式碼中是透過調用COLMAP庫來完成。</li>
<li>Initialization：透過SfM獲得的點雲及<strong>數據進行初始化</strong>，算出各個高斯橢球的位置、形狀、顏色、透明度等參數。</li>
<li>Projection：將每一顆高斯橢球，根據它們與各個相機位置的距離（深度），由近到遠排序進行投影；程式碼中是將中心點座標去跟變換矩陣、協方差矩陣等數據進行運算，就能<strong>將三維空間中的高斯分布轉換到二維的平面上</strong>。</li>
<li>Differentiable Tile Rasterizer：透過<strong>可微光柵化渲染</strong>（即前文提及的「Splatting」得到一張張2D圖像（即流程上的「Image」）。多个3d高斯点颜色合成吗？</li>
<li>Adaptive Density Control：根據步驟4.所獲得之渲染2D圖像（即流程上的「Image」）與Ground Truth圖像（原先上傳的照片）之間的差異，計算出loss值，並將loss值沿藍色箭頭方向回傳。藍色箭頭<strong>向上即更新3D高斯橢球的參數</strong>，向下則送入自<strong>適應密度控制來更新高斯橢球的密度</strong>，如將小顆的高斯克隆成兩顆、將大顆的高斯分裂兩小顆等，以更好地擬合照片中的細節。</li>
</ol>
<h1 id="全文翻译">全文翻译</h1>
<p><a href="https://blog.csdn.net/m0_38068229/article/details/137171860" target="_blank" rel="noopener noreffer ">https://blog.csdn.net/m0_38068229/article/details/137171860</a></p>]]></description></item></channel></rss>